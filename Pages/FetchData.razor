@page "/fetchdata"
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudTable Items="@forecasts" Filter="new Func<WeatherForecast,bool>(FilterFuncString)" >
    <ToolBarContent>
        <MudText Typo="Typo.h6">Weather List</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<WeatherForecast, object>(x=>x.Date)">Date</MudTableSortLabel></MudTh>
        <MudTh>Temp. (C)</MudTh>
        <MudTh>Temp. (F)</MudTh>
        <MudTh>Summary</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Date">@context.Date.ToShortDateString()</MudTd>
        <MudTd DataLabel="TemperatureC">@context.TemperatureC</MudTd>
        <MudTd DataLabel="TemperatureF">@context.TemperatureF</MudTd>
        <MudTd DataLabel="Summary">@context.Summary</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

}

@code {
    private WeatherForecast[]? forecasts;
    private string searchString = "";
    private WeatherForecast selectedItem = null;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    }

    private bool FilterFuncString(WeatherForecast element) => FilterFunc(element, searchString);
    private bool FilterFunc(WeatherForecast element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Date.ToShortDateString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Summary.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
